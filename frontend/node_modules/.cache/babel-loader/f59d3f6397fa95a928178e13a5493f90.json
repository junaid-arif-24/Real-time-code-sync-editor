{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n/**\n * Tag-closer extension for CodeMirror.\n *\n * This extension adds an \"autoCloseTags\" option that can be set to\n * either true to get the default behavior, or an object to further\n * configure its behavior.\n *\n * These are supported options:\n *\n * `whenClosing` (default true)\n *   Whether to autoclose when the '/' of a closing tag is typed.\n * `whenOpening` (default true)\n *   Whether to autoclose the tag when the final '>' of an opening\n *   tag is typed.\n * `dontCloseTags` (default is empty tags for HTML, none for XML)\n *   An array of tag names that should not be autoclosed.\n * `indentTags` (default is block tags for HTML, none for XML)\n *   An array of tag names that should, when opened, cause a\n *   blank line to be added inside the tag, and the blank line and\n *   closing line to be indented.\n * `emptyTags` (default is none)\n *   An array of XML tag names that should be autoclosed with '/>'.\n *\n * See demos/closetag.html for a usage example.\n */\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../fold/xml-fold\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../fold/xml-fold\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  CodeMirror.defineOption(\"autoCloseTags\", false, function (cm, val, old) {\n    if (old != CodeMirror.Init && old) cm.removeKeyMap(\"autoCloseTags\");\n    if (!val) return;\n    var map = {\n      name: \"autoCloseTags\"\n    };\n    if (typeof val != \"object\" || val.whenClosing !== false) map[\"'/'\"] = function (cm) {\n      return autoCloseSlash(cm);\n    };\n    if (typeof val != \"object\" || val.whenOpening !== false) map[\"'>'\"] = function (cm) {\n      return autoCloseGT(cm);\n    };\n    cm.addKeyMap(map);\n  });\n  var htmlDontClose = [\"area\", \"base\", \"br\", \"col\", \"command\", \"embed\", \"hr\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"];\n  var htmlIndent = [\"applet\", \"blockquote\", \"body\", \"button\", \"div\", \"dl\", \"fieldset\", \"form\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"html\", \"iframe\", \"layer\", \"legend\", \"object\", \"ol\", \"p\", \"select\", \"table\", \"ul\"];\n\n  function autoCloseGT(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    var ranges = cm.listSelections(),\n        replacements = [];\n    var opt = cm.getOption(\"autoCloseTags\");\n\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head,\n          tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state),\n          state = inner.state;\n      var tagInfo = inner.mode.xmlCurrentTag && inner.mode.xmlCurrentTag(state);\n      var tagName = tagInfo && tagInfo.name;\n      if (!tagName) return CodeMirror.Pass;\n      var html = inner.mode.configuration == \"html\";\n      var dontCloseTags = typeof opt == \"object\" && opt.dontCloseTags || html && htmlDontClose;\n      var indentTags = typeof opt == \"object\" && opt.indentTags || html && htmlIndent;\n      if (tok.end > pos.ch) tagName = tagName.slice(0, tagName.length - tok.end + pos.ch);\n      var lowerTagName = tagName.toLowerCase(); // Don't process the '>' at the end of an end-tag or self-closing tag\n\n      if (!tagName || tok.type == \"string\" && (tok.end != pos.ch || !/[\\\"\\']/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length == 1) || tok.type == \"tag\" && tagInfo.close || tok.string.indexOf(\"/\") == pos.ch - tok.start - 1 || // match something like <someTagName />\n      dontCloseTags && indexOf(dontCloseTags, lowerTagName) > -1 || closingTagExists(cm, inner.mode.xmlCurrentContext && inner.mode.xmlCurrentContext(state) || [], tagName, pos, true)) return CodeMirror.Pass;\n      var emptyTags = typeof opt == \"object\" && opt.emptyTags;\n\n      if (emptyTags && indexOf(emptyTags, tagName) > -1) {\n        replacements[i] = {\n          text: \"/>\",\n          newPos: CodeMirror.Pos(pos.line, pos.ch + 2)\n        };\n        continue;\n      }\n\n      var indent = indentTags && indexOf(indentTags, lowerTagName) > -1;\n      replacements[i] = {\n        indent: indent,\n        text: \">\" + (indent ? \"\\n\\n\" : \"\") + \"</\" + tagName + \">\",\n        newPos: indent ? CodeMirror.Pos(pos.line + 1, 0) : CodeMirror.Pos(pos.line, pos.ch + 1)\n      };\n    }\n\n    var dontIndentOnAutoClose = typeof opt == \"object\" && opt.dontIndentOnAutoClose;\n\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var info = replacements[i];\n      cm.replaceRange(info.text, ranges[i].head, ranges[i].anchor, \"+insert\");\n      var sel = cm.listSelections().slice(0);\n      sel[i] = {\n        head: info.newPos,\n        anchor: info.newPos\n      };\n      cm.setSelections(sel);\n\n      if (!dontIndentOnAutoClose && info.indent) {\n        cm.indentLine(info.newPos.line, null, true);\n        cm.indentLine(info.newPos.line + 1, null, true);\n      }\n    }\n  }\n\n  function autoCloseCurrent(cm, typingSlash) {\n    var ranges = cm.listSelections(),\n        replacements = [];\n    var head = typingSlash ? \"/\" : \"</\";\n    var opt = cm.getOption(\"autoCloseTags\");\n    var dontIndentOnAutoClose = typeof opt == \"object\" && opt.dontIndentOnSlash;\n\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head,\n          tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state),\n          state = inner.state;\n      if (typingSlash && (tok.type == \"string\" || tok.string.charAt(0) != \"<\" || tok.start != pos.ch - 1)) return CodeMirror.Pass; // Kludge to get around the fact that we are not in XML mode\n      // when completing in JS/CSS snippet in htmlmixed mode. Does not\n      // work for other XML embedded languages (there is no general\n      // way to go from a mixed mode to its current XML state).\n\n      var replacement,\n          mixed = inner.mode.name != \"xml\" && cm.getMode().name == \"htmlmixed\";\n\n      if (mixed && inner.mode.name == \"javascript\") {\n        replacement = head + \"script\";\n      } else if (mixed && inner.mode.name == \"css\") {\n        replacement = head + \"style\";\n      } else {\n        var context = inner.mode.xmlCurrentContext && inner.mode.xmlCurrentContext(state);\n        var top = context.length ? context[context.length - 1] : \"\";\n        if (!context || context.length && closingTagExists(cm, context, top, pos)) return CodeMirror.Pass;\n        replacement = head + top;\n      }\n\n      if (cm.getLine(pos.line).charAt(tok.end) != \">\") replacement += \">\";\n      replacements[i] = replacement;\n    }\n\n    cm.replaceSelections(replacements);\n    ranges = cm.listSelections();\n\n    if (!dontIndentOnAutoClose) {\n      for (var i = 0; i < ranges.length; i++) {\n        if (i == ranges.length - 1 || ranges[i].head.line < ranges[i + 1].head.line) cm.indentLine(ranges[i].head.line);\n      }\n    }\n  }\n\n  function autoCloseSlash(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    return autoCloseCurrent(cm, true);\n  }\n\n  CodeMirror.commands.closeTag = function (cm) {\n    return autoCloseCurrent(cm);\n  };\n\n  function indexOf(collection, elt) {\n    if (collection.indexOf) return collection.indexOf(elt);\n\n    for (var i = 0, e = collection.length; i < e; ++i) {\n      if (collection[i] == elt) return i;\n    }\n\n    return -1;\n  } // If xml-fold is loaded, we use its functionality to try and verify\n  // whether a given tag is actually unclosed.\n\n\n  function closingTagExists(cm, context, tagName, pos, newTag) {\n    if (!CodeMirror.scanForClosingTag) return false;\n    var end = Math.min(cm.lastLine() + 1, pos.line + 500);\n    var nextClose = CodeMirror.scanForClosingTag(cm, pos, null, end);\n    if (!nextClose || nextClose.tag != tagName) return false; // If the immediate wrapping context contains onCx instances of\n    // the same tag, a closing tag only exists if there are at least\n    // that many closing tags of that type following.\n\n    var onCx = newTag ? 1 : 0;\n\n    for (var i = context.length - 1; i >= 0; i--) {\n      if (context[i] == tagName) ++onCx;else break;\n    }\n\n    pos = nextClose.to;\n\n    for (var i = 1; i < onCx; i++) {\n      var next = CodeMirror.scanForClosingTag(cm, pos, null, end);\n      if (!next || next.tag != tagName) return false;\n      pos = next.to;\n    }\n\n    return true;\n  }\n});","map":{"version":3,"sources":["/home/junaid/full stack web development/ResumeProjects/realtime-code-editor/node_modules/codemirror/addon/edit/closetag.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineOption","cm","val","old","Init","removeKeyMap","map","name","whenClosing","autoCloseSlash","whenOpening","autoCloseGT","addKeyMap","htmlDontClose","htmlIndent","getOption","Pass","ranges","listSelections","replacements","opt","i","length","empty","pos","head","tok","getTokenAt","inner","innerMode","getMode","state","tagInfo","mode","xmlCurrentTag","tagName","html","configuration","dontCloseTags","indentTags","end","ch","slice","lowerTagName","toLowerCase","type","test","string","charAt","close","indexOf","start","closingTagExists","xmlCurrentContext","emptyTags","text","newPos","Pos","line","indent","dontIndentOnAutoClose","info","replaceRange","anchor","sel","setSelections","indentLine","autoCloseCurrent","typingSlash","dontIndentOnSlash","replacement","mixed","context","top","getLine","replaceSelections","commands","closeTag","collection","elt","e","newTag","scanForClosingTag","Math","min","lastLine","nextClose","tag","onCx","to","next"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n/**\n * Tag-closer extension for CodeMirror.\n *\n * This extension adds an \"autoCloseTags\" option that can be set to\n * either true to get the default behavior, or an object to further\n * configure its behavior.\n *\n * These are supported options:\n *\n * `whenClosing` (default true)\n *   Whether to autoclose when the '/' of a closing tag is typed.\n * `whenOpening` (default true)\n *   Whether to autoclose the tag when the final '>' of an opening\n *   tag is typed.\n * `dontCloseTags` (default is empty tags for HTML, none for XML)\n *   An array of tag names that should not be autoclosed.\n * `indentTags` (default is block tags for HTML, none for XML)\n *   An array of tag names that should, when opened, cause a\n *   blank line to be added inside the tag, and the blank line and\n *   closing line to be indented.\n * `emptyTags` (default is none)\n *   An array of XML tag names that should be autoclosed with '/>'.\n *\n * See demos/closetag.html for a usage example.\n */\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../fold/xml-fold\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../fold/xml-fold\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  CodeMirror.defineOption(\"autoCloseTags\", false, function(cm, val, old) {\n    if (old != CodeMirror.Init && old)\n      cm.removeKeyMap(\"autoCloseTags\");\n    if (!val) return;\n    var map = {name: \"autoCloseTags\"};\n    if (typeof val != \"object\" || val.whenClosing !== false)\n      map[\"'/'\"] = function(cm) { return autoCloseSlash(cm); };\n    if (typeof val != \"object\" || val.whenOpening !== false)\n      map[\"'>'\"] = function(cm) { return autoCloseGT(cm); };\n    cm.addKeyMap(map);\n  });\n\n  var htmlDontClose = [\"area\", \"base\", \"br\", \"col\", \"command\", \"embed\", \"hr\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\",\n                       \"source\", \"track\", \"wbr\"];\n  var htmlIndent = [\"applet\", \"blockquote\", \"body\", \"button\", \"div\", \"dl\", \"fieldset\", \"form\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\",\n                    \"h5\", \"h6\", \"head\", \"html\", \"iframe\", \"layer\", \"legend\", \"object\", \"ol\", \"p\", \"select\", \"table\", \"ul\"];\n\n  function autoCloseGT(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    var ranges = cm.listSelections(), replacements = [];\n    var opt = cm.getOption(\"autoCloseTags\");\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      var tagInfo = inner.mode.xmlCurrentTag && inner.mode.xmlCurrentTag(state)\n      var tagName = tagInfo && tagInfo.name\n      if (!tagName) return CodeMirror.Pass\n\n      var html = inner.mode.configuration == \"html\";\n      var dontCloseTags = (typeof opt == \"object\" && opt.dontCloseTags) || (html && htmlDontClose);\n      var indentTags = (typeof opt == \"object\" && opt.indentTags) || (html && htmlIndent);\n\n      if (tok.end > pos.ch) tagName = tagName.slice(0, tagName.length - tok.end + pos.ch);\n      var lowerTagName = tagName.toLowerCase();\n      // Don't process the '>' at the end of an end-tag or self-closing tag\n      if (!tagName ||\n          tok.type == \"string\" && (tok.end != pos.ch || !/[\\\"\\']/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length == 1) ||\n          tok.type == \"tag\" && tagInfo.close ||\n          tok.string.indexOf(\"/\") == (pos.ch - tok.start - 1) || // match something like <someTagName />\n          dontCloseTags && indexOf(dontCloseTags, lowerTagName) > -1 ||\n          closingTagExists(cm, inner.mode.xmlCurrentContext && inner.mode.xmlCurrentContext(state) || [], tagName, pos, true))\n        return CodeMirror.Pass;\n\n      var emptyTags = typeof opt == \"object\" && opt.emptyTags;\n      if (emptyTags && indexOf(emptyTags, tagName) > -1) {\n        replacements[i] = { text: \"/>\", newPos: CodeMirror.Pos(pos.line, pos.ch + 2) };\n        continue;\n      }\n\n      var indent = indentTags && indexOf(indentTags, lowerTagName) > -1;\n      replacements[i] = {indent: indent,\n                         text: \">\" + (indent ? \"\\n\\n\" : \"\") + \"</\" + tagName + \">\",\n                         newPos: indent ? CodeMirror.Pos(pos.line + 1, 0) : CodeMirror.Pos(pos.line, pos.ch + 1)};\n    }\n\n    var dontIndentOnAutoClose = (typeof opt == \"object\" && opt.dontIndentOnAutoClose);\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var info = replacements[i];\n      cm.replaceRange(info.text, ranges[i].head, ranges[i].anchor, \"+insert\");\n      var sel = cm.listSelections().slice(0);\n      sel[i] = {head: info.newPos, anchor: info.newPos};\n      cm.setSelections(sel);\n      if (!dontIndentOnAutoClose && info.indent) {\n        cm.indentLine(info.newPos.line, null, true);\n        cm.indentLine(info.newPos.line + 1, null, true);\n      }\n    }\n  }\n\n  function autoCloseCurrent(cm, typingSlash) {\n    var ranges = cm.listSelections(), replacements = [];\n    var head = typingSlash ? \"/\" : \"</\";\n    var opt = cm.getOption(\"autoCloseTags\");\n    var dontIndentOnAutoClose = (typeof opt == \"object\" && opt.dontIndentOnSlash);\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      if (typingSlash && (tok.type == \"string\" || tok.string.charAt(0) != \"<\" ||\n                          tok.start != pos.ch - 1))\n        return CodeMirror.Pass;\n      // Kludge to get around the fact that we are not in XML mode\n      // when completing in JS/CSS snippet in htmlmixed mode. Does not\n      // work for other XML embedded languages (there is no general\n      // way to go from a mixed mode to its current XML state).\n      var replacement, mixed = inner.mode.name != \"xml\" && cm.getMode().name == \"htmlmixed\"\n      if (mixed && inner.mode.name == \"javascript\") {\n        replacement = head + \"script\";\n      } else if (mixed && inner.mode.name == \"css\") {\n        replacement = head + \"style\";\n      } else {\n        var context = inner.mode.xmlCurrentContext && inner.mode.xmlCurrentContext(state)\n        var top = context.length ? context[context.length - 1] : \"\"\n        if (!context || (context.length && closingTagExists(cm, context, top, pos)))\n          return CodeMirror.Pass;\n        replacement = head + top\n      }\n      if (cm.getLine(pos.line).charAt(tok.end) != \">\") replacement += \">\";\n      replacements[i] = replacement;\n    }\n    cm.replaceSelections(replacements);\n    ranges = cm.listSelections();\n    if (!dontIndentOnAutoClose) {\n        for (var i = 0; i < ranges.length; i++)\n            if (i == ranges.length - 1 || ranges[i].head.line < ranges[i + 1].head.line)\n                cm.indentLine(ranges[i].head.line);\n    }\n  }\n\n  function autoCloseSlash(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    return autoCloseCurrent(cm, true);\n  }\n\n  CodeMirror.commands.closeTag = function(cm) { return autoCloseCurrent(cm); };\n\n  function indexOf(collection, elt) {\n    if (collection.indexOf) return collection.indexOf(elt);\n    for (var i = 0, e = collection.length; i < e; ++i)\n      if (collection[i] == elt) return i;\n    return -1;\n  }\n\n  // If xml-fold is loaded, we use its functionality to try and verify\n  // whether a given tag is actually unclosed.\n  function closingTagExists(cm, context, tagName, pos, newTag) {\n    if (!CodeMirror.scanForClosingTag) return false;\n    var end = Math.min(cm.lastLine() + 1, pos.line + 500);\n    var nextClose = CodeMirror.scanForClosingTag(cm, pos, null, end);\n    if (!nextClose || nextClose.tag != tagName) return false;\n    // If the immediate wrapping context contains onCx instances of\n    // the same tag, a closing tag only exists if there are at least\n    // that many closing tags of that type following.\n    var onCx = newTag ? 1 : 0\n    for (var i = context.length - 1; i >= 0; i--) {\n      if (context[i] == tagName) ++onCx\n      else break\n    }\n    pos = nextClose.to;\n    for (var i = 1; i < onCx; i++) {\n      var next = CodeMirror.scanForClosingTag(cm, pos, null, end);\n      if (!next || next.tag != tagName) return false;\n      pos = next.to;\n    }\n    return true;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}